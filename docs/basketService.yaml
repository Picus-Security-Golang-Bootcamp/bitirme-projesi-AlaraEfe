swagger: "2.0"
info:
  description: "This is a sample server BasketService server.  "
  version: "1.0.0"
  title: "Basket Service"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "berfu.efe@ozu.edu.tr"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/api/v1/basket-service-api"
tags:
  - name: "category"
    description: "Categories of the Basket Service"
  - name: "product"
    description: "Products of the Basket Service"
  - name: "user"
    description: "Users of the Basket Service "

schemes:
  - "https"
  - "http"
paths:
  /category/upload:
    post:
      tags:
        - "category"
      summary: "Add categories to the service"
      description: ""
      operationId: "uploadCategoryFile"
      consumes:
        - "application/csv"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "categories needs to be added as csv file"
          required: true
          schema:
            $ref: "#/definitions/Category"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Category"
        "405":
          description: "Invalid input"
  /category/list:
    get:
      tags:
        - "category"
      summary: "List categories in the service"
      description: ""
      operationId: "listCategories"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Categories Listed"
          required: true
          schema:
            $ref: "#/definitions/Category"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Category"
        "405":
          description: ""
  /user/signUp:
    post:
      tags:
        - "user"
      summary: "create a new user"
      description: "This can only be done by the logged in user for sign up to the service."
      operationId: "signUp"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    post:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: "This can be done to login to the basket service"
      operationId: "login"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Author object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Login"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /product/create:
    post:
      tags:
        - "product"
      summary: "Add products to the service"
      description: ""
      operationId: "createProduct"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "products needs to be added one by one"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        "405":
          description: "Invalid input"

  /product/list:
    get:
      tags:
        - "product"
      summary: "List products in the service"
      description: ""
      operationId: "listProduct"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "products listed"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        "405":
          description: ""
          
  /product/:id:
    get:
      tags:
        - "product"
      summary: "Gets the products in the service with given id"
      description: ""
      operationId: "getProductByID"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Gets the products with productid"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        "405":
          description: "Invalid Product"

  /product/searchByProductName/:name:
    get:
      tags:
        - "product"
      summary: "Gets the products in the service with given product name"
      description: ""
      operationId: "searchAndGetProductByName"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Gets the products with productName"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        "405":
          description: "Invalid Product"          

  /product/searchByProductID/:id:
    get:
      tags:
        - "product"
      summary: "Searches and gets the products in the service with given product id"
      description: ""
      operationId: "searchAndGetProductByID"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Searches and gets the products with given productID"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        "405":
          description: "Invalid Product"     
          
  /product/deleteProductByID/:id:
    delete:
      tags:
        - "product"
      summary: "Deletes the products in the service with given product id"
      description: ""
      operationId: "deleteProductByID"
      parameters:
        - in: "body"
          name: "body"
          description: "Deletes the products with given productID"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        "405":
          description: "Invalid Product"    

  /product/updateProductByID/:id:
    put:
      tags:
        - "product"
      summary: "Puts the products in the service with given product id"
      description: ""
      operationId: "deleteProductByID"
      parameters:
        - in: "body"
          name: "body"
          description: "Deletes the products with given productID"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        "405":
          description: "Invalid Product"            


definitions:
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "uint"
      name:
        type: "string"
      Products:
        type: "array"
        items:
          $ref: "#/definitions/Product"
  Product:
    type: "object"
    required:
      - "product_id"
      - "product_name"
      - "product_stock"
      - "product_price"
      - "product_stock_code"
      - "product_type"
      - "product_color"
      - "product_size"
      - "product_material"
      - "gender"
    properties:
      product_id:
        type: "integer"
        format: "uint"
      product_name:
        type: "string"
      product_stock:
        type: "integer"
        format: "int"
      product_price:
        type: "number"
        format: "float64"
      product_stock_code:
        type: "string"
      product_type:
        type: "string"
      product_color:
        type: "string"
      product_size:
        type: "string"
      product_material:
        type: "string"
      gender:
        type: "string"
      Category:
        type: "object"
        $ref: "#/definitions/Category"      
        
        
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "uint"
      email:
        type: "string"
      password:
        type: "string"
      role:
        type: "string"

  Login:
    type: "object"
    required:
      - email
      - password
    properties:
      email:
        type: "string"
      password:
        type: "string"
  